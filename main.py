 # 1 commit (task info)
#-----------------------------------------------------INFO------------------------------------------------------------------
# Представим, что некое приложение хранит плейлист песен в двух видах:
#   * список списков с парами значений строка-вещественное число
#   * кортеж строк
# Каждая песня содержит: название и время звучания.

# Задание
# 1. Посчитайте общее время звучания n случайных песен, где n - количество запрошенных песен
# 2. Используйте модули random и datetime. Или любые другие.
# 3. Решение должно включать функцию, которая в качестве аргумента способна принимать плейлисты разных типов данных

# В результате решением задачи является функция, которая:
#   * может принимать как первый плейлист, так и второй в качестве аргумента
#   * принимает параметр n, число. Это количество песен
#   * возвращает время звучания, как объект времени timedelta, либо строку, либо вещественное число
# При этом функций в задаче может быть несколько. То есть решение можно разбить на несколько функций.
# Но результат задачи можно получить вызвав одну функцию!
#get_duration(playlist: Iterable, n: int) -> Any


# --------------------------------------------------PLAYLISTS-------------------------------------------------------------------